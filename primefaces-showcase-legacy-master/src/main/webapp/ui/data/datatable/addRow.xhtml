<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="./template.xhtml">
    <ui:define name="head">
    </ui:define>

    <ui:define name="title">
        DataTable - <span class="subitem">Add Row</span>
    </ui:define>

    <ui:define name="description">
        A new row can be added by clicking the Add new button.
    </ui:define>

    <ui:define name="implementation">

         <h:form id="form">
            <p:growl id="msgs" showDetail="true"/>

            <p:dataTable id="cars1" widgetVar="cars1" var="car" value="#{dtAddRowView.cars1}" editable="true" style="margin-bottom:20px">
                <f:facet name="header">
                    Row Editing with add functionality
                </f:facet>

                <p:ajax event="rowEdit" listener="#{dtAddRowView.onRowEdit}" update=":form:msgs" />
                <p:ajax event="rowEditCancel" listener="#{dtAddRowView.onRowCancel}" update=":form:msgs" />

                <p:column headerText="Id">
                    <p:cellEditor>
                        <f:facet name="output"><h:outputText value="#{car.id}" /></f:facet>
                        <f:facet name="input"><p:inputText id="modelInput" value="#{car.id}" style="width:100%"/></f:facet>
                    </p:cellEditor>
                </p:column>

                <p:column headerText="Year">
                    <p:cellEditor>
                        <f:facet name="output"><h:outputText value="#{car.year}" /></f:facet>
                        <f:facet name="input"><p:inputText value="#{car.year}" style="width:100%" label="Year"/></f:facet>
                    </p:cellEditor>
                </p:column>

                <p:column headerText="Brand">
                    <p:cellEditor>
                        <f:facet name="output"><h:outputText value="#{car.brand}" /></f:facet>
                        <f:facet name="input">
                            <h:selectOneMenu value="#{car.brand}" style="width:100%">
                                <f:selectItems value="#{dtEditView.brands}" var="man" itemLabel="#{man}" itemValue="#{man}" />
                            </h:selectOneMenu>
                        </f:facet>
                    </p:cellEditor>
                </p:column>

                <p:column headerText="Color">
                    <p:cellEditor>
                        <f:facet name="output"><h:outputText value="#{car.color}" /></f:facet>
                        <f:facet name="input">
                            <h:selectOneMenu value="#{car.color}" style="width:100%">
                                <f:selectItems value="#{dtEditView.colors}" var="color" itemLabel="#{color}" itemValue="#{color}" />
                            </h:selectOneMenu>
                        </f:facet>
                    </p:cellEditor>
                </p:column>

                <p:column style="width:32px">
                    <p:rowEditor />
                </p:column>
            </p:dataTable>

             <div class="ui-g">
                 <div class="ui-g-12">
                     <p:commandButton value="Add new row" styleClass="ui-priority-primary" process="@this" update=":form:msgs"
                                      actionListener="#{dtAddRowView.onAddNew()}" oncomplete="PF('cars1').addRow();"/>
                 </div>
             </div>

         </h:form>

    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="add.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form id=&quot;form&quot;&gt;
   &lt;p:growl id=&quot;msgs&quot; showDetail=&quot;true&quot;/&gt;

   &lt;p:dataTable id=&quot;cars1&quot; widgetVar=&quot;cars1&quot; var=&quot;car&quot; value=&quot;\#{dtEditView.cars1}&quot; editable=&quot;true&quot; style=&quot;margin-bottom:20px&quot;&gt;
       &lt;f:facet name=&quot;header&quot;&gt;
           Row Editing with add functionality
       &lt;/f:facet&gt;

       &lt;p:ajax event=&quot;rowEdit&quot; listener=&quot;\#{dtEditView.onRowEdit}&quot; update=&quot;:form:msgs&quot; /&gt;
       &lt;p:ajax event=&quot;rowEditCancel&quot; listener=&quot;\#{dtEditView.onRowCancel}&quot; update=&quot;:form:msgs&quot; /&gt;

       &lt;p:column headerText=&quot;Id&quot;&gt;
           &lt;p:cellEditor&gt;
               &lt;f:facet name=&quot;output&quot;&gt;&lt;h:outputText value=&quot;\#{car.id}&quot; /&gt;&lt;/f:facet&gt;
               &lt;f:facet name=&quot;input&quot;&gt;&lt;p:inputText id=&quot;modelInput&quot; value=&quot;\#{car.id}&quot; style=&quot;width:100%&quot;/&gt;&lt;/f:facet&gt;
           &lt;/p:cellEditor&gt;
       &lt;/p:column&gt;

       &lt;p:column headerText=&quot;Year&quot;&gt;
           &lt;p:cellEditor&gt;
               &lt;f:facet name=&quot;output&quot;&gt;&lt;h:outputText value=&quot;\#{car.year}&quot; /&gt;&lt;/f:facet&gt;
               &lt;f:facet name=&quot;input&quot;&gt;&lt;p:inputText value=&quot;\#{car.year}&quot; style=&quot;width:100%&quot; label=&quot;Year&quot;/&gt;&lt;/f:facet&gt;
           &lt;/p:cellEditor&gt;
       &lt;/p:column&gt;

       &lt;p:column headerText=&quot;Brand&quot;&gt;
           &lt;p:cellEditor&gt;
               &lt;f:facet name=&quot;output&quot;&gt;&lt;h:outputText value=&quot;\#{car.brand}&quot; /&gt;&lt;/f:facet&gt;
               &lt;f:facet name=&quot;input&quot;&gt;
                   &lt;h:selectOneMenu value=&quot;\#{car.brand}&quot; style=&quot;width:100%&quot;&gt;
                       &lt;f:selectItems value=&quot;\#{dtEditView.brands}&quot; var=&quot;man&quot; itemLabel=&quot;\#{man}&quot; itemValue=&quot;\#{man}&quot; /&gt;
                   &lt;/h:selectOneMenu&gt;
               &lt;/f:facet&gt;
           &lt;/p:cellEditor&gt;
       &lt;/p:column&gt;

       &lt;p:column headerText=&quot;Color&quot;&gt;
           &lt;p:cellEditor&gt;
               &lt;f:facet name=&quot;output&quot;&gt;&lt;h:outputText value=&quot;\#{car.color}&quot; /&gt;&lt;/f:facet&gt;
               &lt;f:facet name=&quot;input&quot;&gt;
                   &lt;h:selectOneMenu value=&quot;\#{car.color}&quot; style=&quot;width:100%&quot;&gt;
                       &lt;f:selectItems value=&quot;\#{dtEditView.colors}&quot; var=&quot;color&quot; itemLabel=&quot;\#{color}&quot; itemValue=&quot;\#{color}&quot; /&gt;
                   &lt;/h:selectOneMenu&gt;
               &lt;/f:facet&gt;
           &lt;/p:cellEditor&gt;
       &lt;/p:column&gt;

       &lt;p:column style=&quot;width:32px&quot;&gt;
           &lt;p:rowEditor /&gt;
       &lt;/p:column&gt;
   &lt;/p:dataTable&gt;

    &lt;div class=&quot;ui-g&quot;&gt;
        &lt;div class=&quot;ui-g-12&quot;&gt;
            &lt;p:commandButton value=&quot;Add new row&quot; styleClass=&quot;ui-priority-primary&quot; process=&quot;@this&quot; update=&quot;:form:msgs&quot;
                          actionListener=&quot;\#{dtAddRowView.onAddNew()}&quot; oncomplete=&quot;PF(&apos;cars1&apos;).addRow();&quot;/&gt;
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="AddView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.datatable;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import java.io.Serializable;
import java.util.List;
import org.primefaces.event.RowEditEvent;
import org.primefaces.showcase.domain.Car;
import org.primefaces.showcase.service.CarService;

@ManagedBean(name="dtAddRowView")
@ViewScoped
public class AddRowView implements Serializable {

    private List&lt;Car&gt; cars1;

    @ManagedProperty("\#{carService}")
    private CarService service;

    @PostConstruct
    public void init() {
        cars1 = service.createCars(10);
    }

    public List&lt;Car&gt; getCars1() {
        return cars1;
    }

    public List&lt;String&gt; getBrands() {
        return service.getBrands();
    }

    public List&lt;String&gt; getColors() {
        return service.getColors();
    }

    public void setService(CarService service) {
        this.service = service;
    }

    public void onRowEdit(RowEditEvent event) {
        FacesMessage msg = new FacesMessage("Car Edited", ((Car) event.getObject()).getId());
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    public void onRowCancel(RowEditEvent event) {
        FacesMessage msg = new FacesMessage("Edit Cancelled", ((Car) event.getObject()).getId());
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    public void onAddNew() {
        // Add one new car to the table:
        Car car2Add = service.createCars(1).get(0);
        cars1.add(car2Add);
        FacesMessage msg = new FacesMessage("New Car added", car2Add.getId());
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }


}
                </pre>
            </p:tab>

            <p:tab title="CarService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import org.primefaces.showcase.domain.Car;

@ManagedBean(name = "carService")
@ApplicationScoped
public class CarService {

    private final static String[] colors;

	private final static String[] brands;

    static {
		colors = new String[10];
		colors[0] = "Black";
		colors[1] = "White";
		colors[2] = "Green";
		colors[3] = "Red";
		colors[4] = "Blue";
		colors[5] = "Orange";
		colors[6] = "Silver";
		colors[7] = "Yellow";
		colors[8] = "Brown";
		colors[9] = "Maroon";

		brands = new String[10];
		brands[0] = "BMW";
		brands[1] = "Mercedes";
		brands[2] = "Volvo";
		brands[3] = "Audi";
		brands[4] = "Renault";
		brands[5] = "Fiat";
		brands[6] = "Volkswagen";
		brands[7] = "Honda";
		brands[8] = "Jaguar";
		brands[9] = "Ford";
	}

    public List&lt;Car&gt; createCars(int size) {
        List&lt;Car&gt; list = new ArrayList&lt;Car&gt;();
		for(int i = 0 ; i &lt; size ; i++) {
			list.add(new Car(getRandomId(), getRandomBrand(), getRandomYear(), getRandomColor(), getRandomPrice(), getRandomSoldState()));
        }

        return list;
    }

    private String getRandomId() {
		return UUID.randomUUID().toString().substring(0, 8);
	}

    private int getRandomYear() {
		return (int) (Math.random() * 50 + 1960);
	}

	private String getRandomColor() {
		return colors[(int) (Math.random() * 10)];
	}

	private String getRandomBrand() {
		return brands[(int) (Math.random() * 10)];
	}

    public int getRandomPrice() {
		return (int) (Math.random() * 100000);
	}

    public boolean getRandomSoldState() {
		return (Math.random() &gt; 0.5) ? true: false;
	}

    public List&lt;String&gt; getColors() {
        return Arrays.asList(colors);
    }

    public List&lt;String&gt; getBrands() {
        return Arrays.asList(brands);
    }
}
                </pre>
            </p:tab>

        </p:tabView>

    </ui:define>

</ui:composition>