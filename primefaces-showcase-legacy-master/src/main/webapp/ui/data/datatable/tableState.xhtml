<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="./template.xhtml">

    <ui:define name="head">
        <style type="text/css">
            .ui-datatable .ui-datatable-header {
                text-align: right !important;
            }
            
            .ui-selectcheckboxmenu-panel .ui-selectcheckboxmenu-header .ui-chkbox {
                display: none;
            }
        </style>
    </ui:define>
    
    <ui:define name="title">
        DataTable - <span class="subitem">Table State</span> <span class="blue">- since v6.0.10</span>
    </ui:define>

    <ui:define name="description">
        TableState feature enables DataTable to maintain its state across pages by setting multiViewState attribute to true. In this demo,
        manipulate table with pagination, sorting, filtering and selection, then visit another page and then come back to this page. DataTable
        state should remain as you've left it.
    </ui:define>

    <ui:define name="implementation">
        
        <h:form id="form">
            
            <p:dataTable id="tableStateDT" var="car" value="#{dtTableStateView.cars}" widgetVar="carsTable" multiViewState="true"
                         rows="10" paginator="true"
                         paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                         rowsPerPageTemplate="5,10,15"
                         selectionMode="single" selection="#{dtTableStateView.selectedCar}" rowKey="#{car.id}"
                         emptyMessage="No cars found with given criteria" filteredValue="#{dtTableStateView.filteredCars}">

                <f:facet name="header">
                    <p:outputPanel>
                        <h:outputText value="Search all fields:" />
                        <p:inputText id="globalFilter" onkeyup="PF('carsTable').filter()" style="width:150px" placeholder="Enter keyword"/>
                    </p:outputPanel>
                </f:facet>
                
                <p:ajax event="rowSelect" update=":form:carDetail" oncomplete="PF('carDialog').show()" />

                <p:column headerText="Id" filterBy="#{car.id}" sortBy="#{car.id}" filterMatchMode="contains">
                    <h:outputText value="#{car.id}" />
                </p:column>

                <p:column headerText="Year" filterBy="#{car.year}" sortBy="#{car.year}" filterMatchMode="startsWith">
                    <h:outputText value="#{car.year}" />
                </p:column>

                <p:column headerText="Brand" filterBy="#{car.brand}" sortBy="#{car.brand}" filterMatchMode="exact">
                    <f:facet name="filter">
                        <p:selectOneMenu onchange="PF('carsTable').filter()" style="width:100%; box-sizing: border-box;" >
                            <f:selectItem itemLabel="Select One" itemValue="#{null}" noSelectionOption="true" />
                            <f:selectItems value="#{dtTableStateView.brands}" />
                        </p:selectOneMenu>
                    </f:facet>
                    <h:outputText value="#{car.brand}" />
                </p:column>

                <p:column headerText="Color" filterBy="#{car.color}" sortBy="#{car.color}" filterMatchMode="in">
                    <f:facet name="filter">
                        <p:selectCheckboxMenu label="Colors" onchange="PF('carsTable').filter()" style="width:100%; box-sizing: border-box;" scrollHeight="150">
                            <f:selectItems value="#{dtTableStateView.colors}" />
                        </p:selectCheckboxMenu>
                    </f:facet>
                    <h:outputText value="#{car.color}" />
                </p:column>
            </p:dataTable>
            
            <p:dialog header="Car Info" widgetVar="carDialog" modal="true" showEffect="fade" hideEffect="fade" resizable="false">
                <p:outputPanel id="carDetail" style="text-align:center;">
                    <p:panelGrid  columns="2" rendered="#{not empty dtTableStateView.selectedCar}" columnClasses="label,value">
                        <f:facet name="header">
                            <p:graphicImage name="demo/images/car/#{dtTableStateView.selectedCar.brand}-big.gif"/> 
                        </f:facet>
                        
                        <h:outputText value="Id:" />
                        <h:outputText value="#{dtTableStateView.selectedCar.id}" />

                        <h:outputText value="Year" />
                        <h:outputText value="#{dtTableStateView.selectedCar.year}" />
                        
                        <h:outputText value="Brand" />
                        <h:outputText value="#{dtTableStateView.selectedCar.brand}" />

                        <h:outputText value="Color:" />
                        <h:outputText value="#{dtTableStateView.selectedCar.color}" style="color:#{dtTableStateView.selectedCar.color}"/>
                    </p:panelGrid>
                </p:outputPanel>
            </p:dialog>
            
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="tableState.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form&gt;
    &lt;p:dataTable id="tableStateDT" var="car" value="\#{dtTableStateView.cars}" widgetVar="carsTable" multiViewState="true"
                 rows="10" paginator="true"
                 paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                 rowsPerPageTemplate="5,10,15"
                 selectionMode="single" selection="\#{dtTableStateView.selectedCar}" rowKey="\#{car.id}"
                 emptyMessage="No cars found with given criteria" filteredValue="\#{dtTableStateView.filteredCars}"&gt;

        &lt;f:facet name="header"&gt;
            &lt;p:outputPanel&gt;
                &lt;h:outputText value="Search all fields:" /&gt;
                &lt;p:inputText id="globalFilter" onkeyup="PF('carsTable').filter()" style="width:150px" placeholder="Enter keyword"/&gt;
            &lt;/p:outputPanel&gt;
        &lt;/f:facet&gt;

        &lt;p:ajax event="rowSelect" update=":form:carDetail" oncomplete="PF('carDialog').show()" /&gt;

        &lt;p:column headerText="Id" filterBy="\#{car.id}" sortBy="\#{car.id}" filterMatchMode="contains"&gt;
            &lt;h:outputText value="\#{car.id}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Year" filterBy="\#{car.year}" sortBy="\#{car.year}" filterMatchMode="startsWith"&gt;
            &lt;h:outputText value="\#{car.year}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Brand" filterBy="\#{car.brand}" sortBy="\#{car.brand}" filterMatchMode="exact"&gt;
            &lt;f:facet name="filter"&gt;
                &lt;p:selectOneMenu onchange="PF('carsTable').filter()" style="width:100px;" &gt;
                    &lt;f:selectItem itemLabel="Select One" itemValue="\#{null}" noSelectionOption="true" /&gt;
                    &lt;f:selectItems value="\#{dtTableStateView.brands}" /&gt;
                &lt;/p:selectOneMenu&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="\#{car.brand}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Color" filterBy="\#{car.color}" sortBy="\#{car.color}" filterMatchMode="in"&gt;
            &lt;f:facet name="filter"&gt;
                &lt;p:selectCheckboxMenu label="Colors" onchange="PF('carsTable').filter()" style="width:80px;" panelStyle="width:125px" scrollHeight="150"&gt;
                    &lt;f:selectItems value="\#{dtTableStateView.colors}" /&gt;
                &lt;/p:selectCheckboxMenu&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="\#{car.color}" /&gt;
        &lt;/p:column&gt;
    &lt;/p:dataTable&gt;

    &lt;p:dialog header="Car Info" widgetVar="carDialog" modal="true" showEffect="fade" hideEffect="fade" resizable="false"&gt;
        &lt;p:outputPanel id="carDetail" style="text-align:center;"&gt;
            &lt;p:panelGrid  columns="2" rendered="\#{not empty dtTableStateView.selectedCar}" columnClasses="label,value"&gt;
                &lt;f:facet name="header"&gt;
                    &lt;p:graphicImage name="demo/images/car/\#{dtTableStateView.selectedCar.brand}-big.gif"/&gt; 
                &lt;/f:facet&gt;

                &lt;h:outputText value="Id:" /&gt;
                &lt;h:outputText value="\#{dtTableStateView.selectedCar.id}" /&gt;

                &lt;h:outputText value="Year" /&gt;
                &lt;h:outputText value="\#{dtTableStateView.selectedCar.year}" /&gt;

                &lt;h:outputText value="Brand" /&gt;
                &lt;h:outputText value="\#{dtTableStateView.selectedCar.brand}" /&gt;

                &lt;h:outputText value="Color:" /&gt;
                &lt;h:outputText value="\#{dtTableStateView.selectedCar.color}" style="color:\#{dtTableStateView.selectedCar.color}"/&gt;
            &lt;/p:panelGrid&gt;
        &lt;/p:outputPanel&gt;
    &lt;/p:dialog&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="TableStateView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.datatable;

import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import org.primefaces.showcase.domain.Car;
import org.primefaces.showcase.service.CarService;

@ManagedBean(name="dtTableStateView")
@SessionScoped
public class TableStateView implements Serializable {
    
    private List&lt;Car&gt; cars;
    
    private List&lt;Car&gt; filteredCars;
    
    private Car selectedCar;
    
    @ManagedProperty("\#{carService}")
    private CarService service;

    @PostConstruct
    public void init() {
        cars = service.createCars(50);
    }
    
    public List&lt;String&gt; getBrands() {
        return service.getBrands();
    }
    
    public List&lt;String&gt; getColors() {
        return service.getColors();
    }
    
    public List&lt;Car&gt; getCars() {
        return cars;
    }

    public List&lt;Car&gt; getFilteredCars() {
        return filteredCars;
    }

    public Car getSelectedCar() {
        return selectedCar;
    }

    public void setSelectedCar(Car selectedCar) {
        this.selectedCar = selectedCar;
    }

    public void setFilteredCars(List&lt;Car&gt; filteredCars) {
        this.filteredCars = filteredCars;
    }

    public void setService(CarService service) {
        this.service = service;
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="CarService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import org.primefaces.showcase.domain.Car;

@ManagedBean(name = "carService")
@ApplicationScoped
public class CarService {
    
    private final static String[] colors;
	
	private final static String[] brands;
    
    static {
		colors = new String[10];
		colors[0] = "Black";
		colors[1] = "White";
		colors[2] = "Green";
		colors[3] = "Red";
		colors[4] = "Blue";
		colors[5] = "Orange";
		colors[6] = "Silver";
		colors[7] = "Yellow";
		colors[8] = "Brown";
		colors[9] = "Maroon";
		
		brands = new String[10];
		brands[0] = "BMW";
		brands[1] = "Mercedes";
		brands[2] = "Volvo";
		brands[3] = "Audi";
		brands[4] = "Renault";
		brands[5] = "Fiat";
		brands[6] = "Volkswagen";
		brands[7] = "Honda";
		brands[8] = "Jaguar";
		brands[9] = "Ford";
	}
    
    public List&lt;Car&gt; createCars(int size) {
        List&lt;Car&gt; list = new ArrayList&lt;Car&gt;();
		for(int i = 0 ; i &lt; size ; i++) {
			list.add(new Car(getRandomId(), getRandomBrand(), getRandomYear(), getRandomColor(), getRandomPrice(), getRandomSoldState()));
        }
        
        return list;
    }
    
    private String getRandomId() {
		return UUID.randomUUID().toString().substring(0, 8);
	}
    
    private int getRandomYear() {
		return (int) (Math.random() * 50 + 1960);
	}
	
	private String getRandomColor() {
		return colors[(int) (Math.random() * 10)];
	}
	
	private String getRandomBrand() {
		return brands[(int) (Math.random() * 10)];
	}
    
    public int getRandomPrice() {
		return (int) (Math.random() * 100000);
	}
    
    public boolean getRandomSoldState() {
		return (Math.random() &gt; 0.5) ? true: false;
	}

    public List&lt;String&gt; getColors() {
        return Arrays.asList(colors);
    }
    
    public List&lt;String&gt; getBrands() {
        return Arrays.asList(brands);
    }
}
                </pre>
            </p:tab>
            
        </p:tabView>

    </ui:define>

</ui:composition>