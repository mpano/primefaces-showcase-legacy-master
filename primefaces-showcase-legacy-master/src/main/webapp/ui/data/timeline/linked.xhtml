<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="./template.xhtml">

    <ui:define name="head">
        <script type="text/javascript">
            //<![CDATA[
            function onrangechange1() {
                var range = PF('timelineFirstWdgt').getVisibleRange();
                PF('timelineSecondWdgt').setVisibleRange(range.start, range.end);
            }

            function onrangechange2() {
                var range = PF('timelineSecondWdgt').getVisibleRange();
                PF('timelineFirstWdgt').setVisibleRange(range.start, range.end);
            }
            //]]>
        </script>
    </ui:define>

    <ui:define name="title">
        Timeline - <span class="subitem">Two Linked Timelines</span>
    </ui:define>

    <ui:define name="description">
        When moving one timeline, the other moves along. Use mouse scroll wheel for zoom-in and zoom-out. A click on an event in the first timeline
            selects an event in the second timeline (Project A or Project B).
    </ui:define>

    <ui:define name="implementation">

        <h:form id="form">
            <p:growl id="growl" showSummary="true" showDetail="false">
                <p:autoUpdate />
            </p:growl>

            <h3 style="margin-top: 0">Events</h3>
            <p:timeline id="timelineFirst" value="#{linkedTimelinesView.modelFirst}" var="task"
                        height="250px" widgetVar="timelineFirstWdgt">
                <p:ajax event="rangechange" oncomplete="onrangechange1()"/>
                <p:ajax event="select" listener="#{linkedTimelinesView.onSelect}"/>

                <h:panelGroup layout="block" rendered="#{not task.period}" style="padding-bottom:5px">
                    <h:outputText value="#{task.title}"/>
                </h:panelGroup>
                <p:graphicImage library="demo" name="#{task.imagePath}"/>
                <h:panelGroup rendered="#{task.period}" style="padding:8px">
                    <h:outputText value="#{task.title}"/>
                </h:panelGroup>
            </p:timeline>

            <h3>Projects</h3>
            <p:timeline id="timelineSecond" value="#{linkedTimelinesView.modelSecond}"
                        height="150px" widgetVar="timelineSecondWdgt">
                <p:ajax event="rangechange" oncomplete="onrangechange2()"/>
            </p:timeline>
        </h:form>

    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="linked.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form id="form"&gt;
    &lt;p:growl id="growl" showSummary="true" showDetail="false"&gt;
        &lt;p:autoUpdate /&gt;
    &lt;/p:growl&gt;

    &lt;h3 style="margin-top: 0"&gt;Events&lt;/h3&gt;
    &lt;p:timeline id="timelineFirst" value="\#{linkedTimelinesView.modelFirst}" var="task"
                height="250px" widgetVar="timelineFirstWdgt"&gt;
        &lt;p:ajax event="rangechange" oncomplete="onrangechange1()"/&gt;
        &lt;p:ajax event="select" listener="\#{linkedTimelinesView.onSelect}"/&gt;

        &lt;h:panelGroup layout="block" rendered="\#{not task.period}" style="padding-bottom:5px"&gt;
            &lt;h:outputText value="\#{task.title}"/&gt;
        &lt;/h:panelGroup&gt;
        &lt;p:graphicImage library="demo" name="\#{task.imagePath}"/&gt;
        &lt;h:panelGroup rendered="\#{task.period}" style="padding:8px"&gt;
            &lt;h:outputText value="\#{task.title}"/&gt;
        &lt;/h:panelGroup&gt;
    &lt;/p:timeline&gt;

    &lt;h3&gt;Projects&lt;/h3&gt;
    &lt;p:timeline id="timelineSecond" value="\#{linkedTimelinesView.modelSecond}"
                height="150px" widgetVar="timelineSecondWdgt"&gt;
        &lt;p:ajax event="rangechange" oncomplete="onrangechange2()"/&gt;
    &lt;/p:timeline&gt;
&lt;/h:form&gt;



&lt;script type="text/javascript"&gt;
    function onrangechange1() {
        var range = PF('timelineFirstWdgt').getVisibleRange();
        PF('timelineSecondWdgt').setVisibleRange(range.start, range.end);
    }

    function onrangechange2() {
        var range = PF('timelineSecondWdgt').getVisibleRange();
        PF('timelineFirstWdgt').setVisibleRange(range.start, range.end);
    }
&lt;/script&gt;
                </pre>
            </p:tab>

            <p:tab title="LinkedTimelinesView.java">
                <pre name="code" class="brush:java">
import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import org.primefaces.component.timeline.TimelineUpdater;
import org.primefaces.event.timeline.TimelineSelectEvent;
import org.primefaces.model.timeline.TimelineEvent;
import org.primefaces.model.timeline.TimelineModel;

@ManagedBean(name = "linkedTimelinesView")
@ViewScoped
public class LinkedTimelinesView implements Serializable {

    private TimelineModel modelFirst;  // model of the first timeline
    private TimelineModel modelSecond; // model of the second timeline
    private boolean aSelected;         // flag if the project A is selected (for test of select() call on the 2. model)

    @PostConstruct
    public void init() {
        createFirstTimeline();
        createSecondTimeline();
    }

    private void createFirstTimeline() {
        modelFirst = new TimelineModel();

        Calendar cal = Calendar.getInstance();
        cal.set(2015, Calendar.AUGUST, 22, 17, 30, 0);
        modelFirst.add(new TimelineEvent(new Task("Mail from boss", "images/timeline/mail.png", false), cal.getTime()));

        cal.set(2015, Calendar.AUGUST, 23, 23, 0, 0);
        modelFirst.add(new TimelineEvent(new Task("Call back my boss", "images/timeline/callback.png", false), cal.getTime()));

        cal.set(2015, Calendar.AUGUST, 24, 21, 45, 0);
        modelFirst.add(new TimelineEvent(new Task("Travel to Spain", "images/timeline/location.png", false), cal.getTime()));

        cal.set(2015, Calendar.AUGUST, 26, 0, 0, 0);
        Date startWork = cal.getTime();
        cal.set(2015, Calendar.SEPTEMBER, 2, 0, 0, 0);
        Date endWork = cal.getTime();
        modelFirst.add(new TimelineEvent(new Task("Do homework", "images/timeline/homework.png", true), startWork, endWork));

        cal.set(2015, Calendar.AUGUST, 28, 0, 0, 0);
        modelFirst.add(new TimelineEvent(new Task("Create memo", "images/timeline/memo.png", false), cal.getTime()));

        cal.set(2015, Calendar.AUGUST, 31, 0, 0, 0);
        Date startReport = cal.getTime();
        cal.set(2015, Calendar.SEPTEMBER, 3, 0, 0, 0);
        Date endReport = cal.getTime();
        modelFirst.add(new TimelineEvent(new Task("Create report", "images/timeline/report.png", true), startReport, endReport));
    }

    private void createSecondTimeline() {
        modelSecond = new TimelineModel();

        Calendar cal = Calendar.getInstance();

        cal.set(2015, Calendar.AUGUST, 23, 0, 0, 0);
        Date startProject = cal.getTime();
        cal.set(2015, Calendar.AUGUST, 30, 0, 0, 0);
        Date endProject = cal.getTime();
        modelSecond.add(new TimelineEvent("Project A", startProject, endProject));

        cal.set(2015, Calendar.AUGUST, 27, 0, 0, 0);
        startProject = cal.getTime();
        cal.set(2015, Calendar.AUGUST, 31, 0, 0, 0);
        endProject = cal.getTime();
        modelSecond.add(new TimelineEvent("Project B", startProject, endProject));
    }

    public void onSelect(TimelineSelectEvent e) {
        // get a thread-safe TimelineUpdater instance for the second timeline
        TimelineUpdater timelineUpdater = TimelineUpdater.getCurrentInstance(":form:timelineSecond");

        if (aSelected) {
            // select project B visually (index in the event's list is 1)
            timelineUpdater.select(1);
        } else {
            // select project A visually (index in the event's list is 0)
            timelineUpdater.select(0);
        }

        aSelected = !aSelected;

        FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO,
                "Selected project: " + (aSelected ? "A" : "B"), null);
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    public TimelineModel getModelFirst() {
        return modelFirst;
    }

    public TimelineModel getModelSecond() {
        return modelSecond;
    }

    public class Task implements Serializable {

        private String title;
        private String imagePath;
        private boolean period;

        public Task(String title, String imagePath, boolean period) {
            this.title = title;
            this.imagePath = imagePath;
            this.period = period;
        }

        public String getTitle() {
            return title;
        }

        public String getImagePath() {
            return imagePath;
        }

        public boolean isPeriod() {
            return period;
        }
    }
}

                </pre>
            </p:tab>

        </p:tabView>

    </ui:define>

</ui:composition>